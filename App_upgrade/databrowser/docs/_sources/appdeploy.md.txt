## Application deployment

**IIS CONFIGURATIONS**

First of all, the user needs to copy the two folders from the software package (*databrowser* and *databrowserhub*) in the IIS root directory which from now on we will refer to as **[ROOT_IIS]** (i.e. C:\inetpub\wwwroot\ ) and open the ISS Manager where these folders will now appear.

```eval_rst
 .. image:: _images/iispool1.PNG
    :scale: 70 %
    :alt: iss_pool1
```

The users IIS_IUSRS e IUSR must have the suitable permissions on the web applications, therefore on the folder:

- right click on the folder;
- select *Property/Security*;
- click on *Edit/Add*;
- in the section *“Locations”*, select the local computer;
- in the section *“Enter the object name to select”* write IIS_IUSRS;
- click on *“check names”* and then OK;
- in the section *“Permission for IIS_IUSRS”* include *“full control”*;
- repeat steps from 3 to 6 for user IUSR
- in the section *“Permission for IIS_IUSRS”* include *“write/read”* permissions.

```eval_rst
 .. image:: _images/permissions.JPG
    :scale: 70 %
    :alt: permissions
```

The user can now create a website for the Data Browser

```eval_rst
 .. image:: _images/datab_website.JPG
    :scale: 70 %
    :alt: datab_website

 .. image:: _images/add_website.JPG
    :scale: 70 %
    :alt: add_website
```

The user selects the DefaultApplicationPool or creates a new one with type **.NET CLR Version 4** and selects the psysical path of the databrowser's folder. Finally, he inserts the hostname of his machine (or name created by the network administrator).

At this point the user needs to create an application pool for the web service "databrowserhub". This operation can be made by right-clicking on "Application Pool" and by selecting "Add Application Pool" item

![iss_pool2](_images/iispool2.PNG)

Afterwards, the user needs to create a new application (as shown in picture):

```eval_rst
 .. image:: _images/new_application.JPG
    :scale: 70 %
    :alt: new_application
```

and configure it

```eval_rst
 .. image:: _images/new_application_config.JPG
    :scale: 70 %
    :alt: new_application_config
```

Once the previous operations are completed, the user selects the application pool created for the DataBrowserHub and 
inserts the path to the databrowserhub's folder into the *Physical path* field.

Most recent browsers use aggressive caching techniques that tend to contact the web server only as necessary. 
The client application implements a mechanism to minimize requests to the web server while keeping its latest version in the browser cache. 
In order for this mechanism to work, it is necessary to configure the web server so that caching of the index.html file is denied. Such operation is made possible by adding some custom headers in the
web.config file, stored in the IIS root directory, indicating that the location path file (in this case index.html) must include these just mentioned headers in order to avoid caching. \
The following part of code is the one that was added in the web.config file:

```xml
<?xml version="1.0" encoding="UTF-8"?>
  <configuration>
   <location path="index.html">
    <system.webServer>
     <httpProtocol>
      <customHeaders>
       <add name="Cache-Control" value="no-store, must-revalidate"/>
       <add name="Pragma" value="no-cache" />
       <add name="Expires" value="0" />
      </customHeaders>
     </httpProtocol>
    </system.webServer>
   </location>
  </configuration>
```

**IIS Configuration for Application Initialization**

Initialization needs to be applied on the Application Pool as well as the IIS Application level.
For all possibile IIS' configurations, please check the official Microsoft documentation on the matter: [https://docs.microsoft.com/](https://docs.microsoft.com/). \
Here are some recommended configurations, to leave the IIS pool always active.

![app_pool always running](_images/app_pool_alwaysrun.JPG)

On the Site/Application level user can specify whether the site should pre load; in this case the Preload Enabled flag needs to be set to true.

![preload enabled](_images/preload_enable_true.JPG)

**HTTPS BINDINGS**

It is needed to create a binding for https. The task can be performed as follows:

- click on *Default Web Site*;
- click on *Binding* in the *Actions* menu on the top-right;
- click on *Add*;
- select *http sas type*;
- select an available SSL certificate;
- click on *OK*.

**OTHER POSSIBLE CONFIGURATIONS**

It is also possible to set other parameters (time-outs, lenght content, etc.) that can be useful according to the users' needs.
Here are some examples:
* ***Maximum allowed lenght for the content***
	- Click on the IIS Web Site under which the application has to be installed;
	- double click on the *Requests filtering* menu item;
	- click on *Edit feature settings*;
	- modify the *Maximum allowed content length (byte)* to the desired value.
* ***Connection time-out***. The connection time-out parameter has to be set in order to allow delayed responses by the web services. The suggested value for this parameter is 6000 seconds (100 minutes).
	- Click on the IIS Web Site under which the application has to be installed;
	- select the *Advanced Settings* menu;
	- click on *Limits*;
	- modify the *Connection Timeout* parameter to the desired value.
* ***Request time-out***. This parameter allows to increase the time interval after which a timeout error is launched (blocking the execution) during the waiting of a response by a web service. It is suggested to increase this parameter to 120 minutes.
	- Click on the IIS Web Site under which the application has to be installed;
	- select *Configuration Editor*;
	- access the *system.webServer/aspNetCore* section;
	- modify the *requestTimeout* parameter.
* ***Execution time-out***. This parameter, similar to the previous, allows to increase the time after which a timeout is launched (blocking the execution) after the execution of a web service that doesn’t modify its execution status. Is suggested to increase this parameter to 120 minutes.
	- Click on the IIS Web Site under which the application has to be installed;
	- select *Configuration Editor*;
	- access the *system.webServer/httpRuntime* section;
	- modify the *executionTimeout* parameter.
* ***Session state***. In order to increase the application session duration, the *Session State* parameter has to be set. It allows the maintenance of the session cookies without constraining users to re-login to the application.
	- In IIS manager, click on the *Default Web Site*;
	- click on the *Session State* menu;
	- set the option *TimeOut* (in minutes) to a suitable value (e.g. 60 minutes)
* ***Idle time-out***. This parameter determines the time after which an idle web service is stopped. It allows to eliminate the waiting time for restarting the web service in case of a very long session. It has to be set for each pool involved in long duration tasks.
	- Click on the pool;
	- select Advanced settings;
	- modify the Idle TimeOut parameter i.e. by setting it to 120 minutes.